#pragma once
#pragma COMPUTE_SHADER_ENTRYPOINT(MarchingCubes)
#include "/Engine/Public/Platform.ush"

float3 leafPosition;
int leafDepth;
int nodeIndex;

Buffer<float> isoValues;
Buffer<int> typeValues;
Buffer<int> marchLookUp;

RWBuffer<float> outInfo;
RWBuffer<float> outNormalInfo;
RWBuffer<int> outTypeInfo;

int voxelsPerAxis;
float baseDepthScale;
float isoLevel;

static const int offsets[256] = { 0, 0, 3, 6, 12, 15, 21, 27, 36, 39, 45, 51, 60, 66, 75, 84, 90, 93, 99, 105, 114, 120, 129, 138, 150, 156, 165, 174, 186, 195, 207, 219, 228, 231, 237, 243, 252, 258, 267, 276, 288, 294, 303, 312, 324, 333, 345, 357, 366, 372, 381, 390, 396, 405, 417, 429, 438, 447, 459, 471, 480, 492, 507, 522, 528, 531, 537, 543, 552, 558, 567, 576, 588, 594, 603, 612, 624, 633, 645, 657, 666, 672, 681, 690, 702, 711, 723, 735, 750, 759, 771, 783, 798, 810, 825, 840, 852, 858, 867, 876, 888, 897, 909, 915, 924, 933, 945, 957, 972, 984, 999, 1008, 1014, 1023, 1035, 1047, 1056, 1068, 1083, 1092, 1098, 1110, 1125, 1140, 1152, 1167, 1173, 1185, 1188, 1191, 1197, 1203, 1212, 1218, 1227, 1236, 1248, 1254, 1263, 1272, 1284, 1293, 1305, 1317, 1326, 1332, 1341, 1350, 1362, 1371, 1383, 1395, 1410, 1419, 1425, 1437, 1446, 1458, 1467, 1482, 1488, 1494, 1503, 1512, 1524, 1533, 1545, 1557, 1572, 1581, 1593, 1605, 1620, 1632, 1647, 1662, 1674, 1683, 1695, 1707, 1716, 1728, 1743, 1758, 1770, 1782, 1791, 1806, 1812, 1827, 1839, 1845, 1848, 1854, 1863, 1872, 1884, 1893, 1905, 1917, 1932, 1941, 1953, 1965, 1980, 1986, 1995, 2004, 2010, 2019, 2031, 2043, 2058, 2070, 2085, 2100, 2106, 2118, 2127, 2142, 2154, 2163, 2169, 2181, 2184, 2193, 2205, 2217, 2232, 2244, 2259, 2268, 2280, 2292, 2307, 2322, 2328, 2337, 2349, 2355, 2358, 2364, 2373, 2382, 2388, 2397, 2409, 2415, 2418, 2427, 2433, 2445, 2448, 2454, 2457, 2460 };
static const int lengths[256] = { 0, 3, 3, 6, 3, 6, 6, 9, 3, 6, 6, 9, 6, 9, 9, 6, 3, 6, 6, 9, 6, 9, 9, 12, 6, 9, 9, 12, 9, 12, 12, 9, 3, 6, 6, 9, 6, 9, 9, 12, 6, 9, 9, 12, 9, 12, 12, 9, 6, 9, 9, 6, 9, 12, 12, 9, 9, 12, 12, 9, 12, 15, 15, 6, 3, 6, 6, 9, 6, 9, 9, 12, 6, 9, 9, 12, 9, 12, 12, 9, 6, 9, 9, 12, 9, 12, 12, 15, 9, 12, 12, 15, 12, 15, 15, 12, 6, 9, 9, 12, 9, 12, 6, 9, 9, 12, 12, 15, 12, 15, 9, 6, 9, 12, 12, 9, 12, 15, 9, 6, 12, 15, 15, 12, 15, 6, 12, 3, 3, 6, 6, 9, 6, 9, 9, 12, 6, 9, 9, 12, 9, 12, 12, 9, 6, 9, 9, 12, 9, 12, 12, 15, 9, 6, 12, 9, 12, 9, 15, 6, 6, 9, 9, 12, 9, 12, 12, 15, 9, 12, 12, 15, 12, 15, 15, 12, 9, 12, 12, 9, 12, 15, 15, 12, 12, 9, 15, 6, 15, 12, 6, 3, 6, 9, 9, 12, 9, 12, 12, 15, 9, 12, 12, 15, 6, 9, 9, 6, 9, 12, 12, 15, 12, 15, 15, 6, 12, 9, 15, 12, 9, 6, 12, 3, 9, 12, 12, 15, 12, 15, 9, 12, 12, 15, 15, 6, 9, 12, 6, 3, 6, 9, 9, 6, 9, 12, 6, 3, 9, 6, 12, 3, 6, 3, 3, 0 };
static const int cornerIndexAFromEdge[12] = { 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3 };
static const int cornerIndexBFromEdge[12] = { 1, 2, 3, 0, 5, 6, 7, 4, 4, 5, 6, 7 };

int GetIsoIndex(int3 coord)
{
    int maxIsoCount = (voxelsPerAxis + 1) * (voxelsPerAxis + 1) * (voxelsPerAxis + 1);
    int index = coord.x + coord.y * (voxelsPerAxis + 1) + coord.z * (voxelsPerAxis + 1) * (voxelsPerAxis + 1);
    return max(0, min(index, maxIsoCount + 1));
}

float GetDensity(int3 coord)
{
    bool isEdge = any(coord < 0) || any(coord > voxelsPerAxis);
    if (isEdge) return isoLevel;
    return isoValues[(GetIsoIndex(coord))];
}

int GetType(int3 coord)
{
    bool isEdge = any(coord < 0) || any(coord > voxelsPerAxis);
    if (isEdge) return 0;
    return typeValues[(GetIsoIndex(coord))];
}

float3 CalculateNormal(int3 coord)
{
    int3 offsetX = int3(1, 0, 0);
    int3 offsetY = int3(0, 1, 0);
    int3 offsetZ = int3(0, 0, 1);

    float dx = GetDensity(coord + offsetX) - GetDensity(coord - offsetX);
    float dy = GetDensity(coord + offsetY) - GetDensity(coord - offsetY);
    float dz = GetDensity(coord + offsetZ) - GetDensity(coord - offsetZ);
    float3 delta = float3(dx, dy, dz);
    return all(delta == 0) ? float3(0.0f, 0.0f, 0.0f) : normalize(float3(dx, dy, dz));
}

void CreateVertex(int3 cornerPosA, int3 cornerPosB, int vertexIndex, float3 worldPos, float isoScale)
{
    float3 posA = worldPos + (cornerPosA * isoScale);
    float3 posB = worldPos + (cornerPosB * isoScale);

    float densityA = GetDensity(cornerPosA);
    float densityB = GetDensity(cornerPosB);
    
    float denom = densityB - densityA;
    float t = denom == 0 ? 0 : (isoLevel - densityA) / denom;
    float3 position = posA + (t * (posB - posA));
    
    //float3 normalA = CalculateNormal(cornerPosA);
    //float3 normalB = CalculateNormal(cornerPosB);
    //float3 normalRes = normalA + (t * (normalB - normalA));

    int typeA = GetType(cornerPosA);
    int typeB = GetType(cornerPosB);
    float fType = lerp((float) typeA, (float) typeB, t);
    int typeFinal = round(fType);
    
    uint base = vertexIndex * 3;
   
    //outInfo[base + 0] = position.x;
    //outInfo[base + 1] = position.y;
    //outInfo[base + 2] = position.z;

    //outNormalInfo[base + 0] = normalRes.x;
    //outNormalInfo[base + 1] = normalRes.y;
    //outNormalInfo[base + 2] = normalRes.z;
    outTypeInfo[vertexIndex] = typeFinal;
}

[numthreads(THREADS_X, THREADS_Y, THREADS_Z)]
void MarchingCubes(int3 id : SV_DispatchThreadID)
{
    if (any(id >= voxelsPerAxis)) return;
    
    int voxelsPerLeaf = voxelsPerAxis * voxelsPerAxis * voxelsPerAxis;
    int globalVoxelIndex = nodeIndex * voxelsPerLeaf;
    int localVoxelIndex = ((id.z * (voxelsPerAxis * voxelsPerAxis)) + (id.y * voxelsPerAxis) + id.x);
    int vertexStartIndex = (globalVoxelIndex * 15) + (localVoxelIndex * 15);
    
    [unroll]
    for (int i = 0; i < 15; i++)
    {
        int base = vertexStartIndex + i;
        outInfo[base * 3 + 0] = 0.0;
        outInfo[base * 3 + 1] = 0.0;
        outInfo[base * 3 + 2] = 0.0;

        outNormalInfo[base * 3 + 0] = 0.0;
        outNormalInfo[base * 3 + 1] = 0.0;
        outNormalInfo[base * 3 + 2] = 0.0;
        //outTypeInfo[base] = 0.0;
    }
    
    float scale = baseDepthScale / (1 << leafDepth);
    float centerDis = scale / 2;
    float isoScale = (scale / (voxelsPerAxis));
    float3 minimumCornerWorldPos = leafPosition - float3(centerDis, centerDis, centerDis);

    int3 cornerCoords[8];
    cornerCoords[0] = id + int3(0, 0, 0);
    cornerCoords[1] = id + int3(1, 0, 0);
    cornerCoords[2] = id + int3(1, 0, 1);
    cornerCoords[3] = id + int3(0, 0, 1);
    cornerCoords[4] = id + int3(0, 1, 0);
    cornerCoords[5] = id + int3(1, 1, 0);
    cornerCoords[6] = id + int3(1, 1, 1);
    cornerCoords[7] = id + int3(0, 1, 1);
    
    int config = 0;
    for (int h = 0; h < 8; ++h)
    {
        if (GetDensity(cornerCoords[h]) < isoLevel)
            config |= (1 << h);
    }
    
    int numIndices = lengths[config];
    int offset = offsets[config];
    
    for (int k = 0; k < numIndices; k += 3)
    {
        int v0 = marchLookUp[offset + k];
        int v1 = marchLookUp[offset + 1 + k];
        int v2 = marchLookUp[offset + 2 + k];

        int a0 = cornerIndexAFromEdge[v0];
        int b0 = cornerIndexBFromEdge[v0];

        int a1 = cornerIndexAFromEdge[v1];
        int b1 = cornerIndexBFromEdge[v1];

        int a2 = cornerIndexAFromEdge[v2];
        int b2 = cornerIndexBFromEdge[v2];
        
        int indexA = (vertexStartIndex + k);
        int indexB = (vertexStartIndex + k + 1);
        int indexC = (vertexStartIndex + k + 2);

        CreateVertex(cornerCoords[a0], cornerCoords[b0], indexA, minimumCornerWorldPos, isoScale);
        CreateVertex(cornerCoords[a1], cornerCoords[b1], indexB, minimumCornerWorldPos, isoScale);
        CreateVertex(cornerCoords[a2], cornerCoords[b2], indexC, minimumCornerWorldPos, isoScale);
    }
}
